@misc{alsuhaibani2021naming,
      title={On the Naming of Methods: A Survey of Professional Developers}, 
      author={Reem S. AlSuhaibani and Christian D. Newman and Michael J. Decker and Michael L. Collard and Jonathan I. Maletic},
      year={2021},
      eprint={2102.13555},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@article{NEWMAN2020110740,
title = {On the generation, structure, and semantics of grammar patterns in source code identifiers},
journal = {Journal of Systems and Software},
volume = {170},
pages = {110740},
year = {2020},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110740},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220301680},
author = {Christian D. Newman and Reem S. AlSuhaibani and Michael J. Decker and Anthony Peruma and Dishant Kaushik and Mohamed Wiem Mkaouer and Emily Hill},
keywords = {Program comprehension, Identifier naming, Software maintenance, Source code analysis, Part-of-speech tagging},
abstract = {Identifiers make up a majority of the text in code. They are one of the most basic mediums through which developers describe the code they create and understand the code that others create. Therefore, understanding the patterns latent in identifier naming practices and how accurately we are able to automatically model these patterns is vital if researchers are to support developers and automated analysis approaches in comprehending and creating identifiers correctly and optimally. This paper investigates identifiers by studying sequences of part-of-speech annotations, referred to as grammar patterns. This work advances our understanding of these patterns and our ability to model them by (1) establishing common naming patterns in different types of identifiers, such as class and attribute names; (2) analyzing how different patterns influence comprehension; and (3) studying the accuracy of state-of-the-art techniques for part-of-speech annotations, which are vital in automatically modeling identifier naming patterns, in order to establish their limits and paths toward improvement. To do this, we manually annotate a dataset of 1,335 identifiers from 20 open-source systems and use this dataset to study naming patterns, semantics, and tagger accuracy.}
}

@inproceedings{10.1145/3368089.3417921,
author = {Peruma, Anthony and Almalki, Khalid and Newman, Christian D. and Mkaouer, Mohamed Wiem and Ouni, Ali and Palomba, Fabio},
title = {TsDetect: An Open Source Test Smells Detection Tool},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417921},
doi = {10.1145/3368089.3417921},
abstract = {The test code, just like production source code, is subject to bad design and programming practices, also known as smells. The presence of test smells in a software project may affect the quality, maintainability, and extendability of test suites making them less effective in finding potential faults and quality issues in the project's production code. In this paper, we introduce tsDetect, an automated test smell detection tool for Java software systems that uses a set of detection rules to locate existing test smells in test code. We evaluate the effectiveness of tsDetect on a benchmark of 65 unit test files containing instances of 19 test smell types. Results show that tsDetect achieves a high detection accuracy with an average precision score of 96% and an average recall score of 97%. tsDetect is publicly available, with a demo video, at: https://testsmells.github.io/},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1650â€“1654},
numpages = {5},
keywords = {Detection Tool, Software Quality, Test Smells},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@article{PERUMA2020110704,
title = {Contextualizing rename decisions using refactorings, commit messages, and data types},
journal = {Journal of Systems and Software},
volume = {169},
pages = {110704},
year = {2020},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110704},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220301503},
author = {Anthony Peruma and Mohamed Wiem Mkaouer and Michael J. Decker and Christian D. Newman},
keywords = {Program comprehension, Identifier names, Refactoring, Rename refactoring, Data types},
abstract = {Identifier names are the atoms of program comprehension. Weak identifier names decrease developer productivity and degrade the performance of automated approaches that leverage identifier names in source code analysis; threatening many of the advantages which stand to be gained from advances in artificial intelligence and machine learning. Therefore, it is vital to support developers in naming and renaming identifiers. In this paper, we extend our prior work, which studies the primary method through which names evolve: rename refactorings. In our prior work, we contextualize rename changes by examining commit messages and other refactorings. In this extension, we further consider data type changes which co-occur with these renames, with a goal of understanding how data type changes influence the structure and semantics of renames. In the long term, the outcomes of this study will be used to support research into: (1) recommending when a rename should be applied, (2) recommending how to rename an identifier, and (3) developing a model that describes how developers mentally synergize names using domain and project knowledge. We provide insights into how our data can support rename recommendation and analysis in the future, and reflect on the significant challenges, highlighted by our study, for future research in recommending renames.}
}


@INPROCEEDINGS {8919073,
author = {C. Newman and M. Decker and R. S. AlSuhaibani and A. Peruma and D. Kaushik and E. Hill},
booktitle = {2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
title = {An Open Dataset of Abbreviations and Expansions},
year = {2019},
volume = {},
issn = {},
pages = {280-280},
keywords = {tools;conferences;software maintenance;research and development;indexes;dictionaries;natural languages},
doi = {10.1109/ICSME.2019.00041},
url = {https://doi.ieeecomputersociety.org/10.1109/ICSME.2019.00041},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {oct}
}

@INPROCEEDINGS{8918962,
  author={C. D. {Newman} and M. J. {Decker} and R. S. {Alsuhaibani} and A. {Peruma} and D. {Kaushik} and E. {Hill}},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={An Empirical Study of Abbreviations and Expansions in Software Artifacts}, 
  year={2019},
  volume={},
  number={},
  pages={269-279},
  doi={10.1109/ICSME.2019.00040}
}


@INPROCEEDINGS{8919135,
  author={C. D. {Newman} and A. {Preuma} and R. {AlSuhaibani}},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Modeling the Relationship Between Identifier Name and Behavior}, 
  year={2019},
  volume={},
  number={},
  pages={376-378},
  doi={10.1109/ICSME.2019.00062}
}

@INPROCEEDINGS{8930840,
  author={A. {Peruma} and M. W. {Mkaouer} and M. J. {Decker} and C. D. {Newman}},
  booktitle={2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM)}, 
  title={Contextualizing Rename Decisions using Refactorings and Commit Messages}, 
  year={2019},
  volume={},
  number={},
  pages={74-85},
  doi={10.1109/SCAM.2019.00017}
}

@article{Newman2018,title = {An empirical investigation of how and why developers rename identifiers},journal = {IWoR 2018 - Proceedings of the 2nd International Workshop on Refactoring, co-located with ASE 2018},year = {2018},pages = {26-33},author = {Peruma, A. and Mkaouer, M.W. and Decker, M.J. and Newman, C.D.}}